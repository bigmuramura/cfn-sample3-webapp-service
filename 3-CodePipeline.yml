AWSTemplateFormatVersion: "2010-09-09"
Description: CodeCommit

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Common Settings
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: etc
        Parameters:
          - CodeSeriesStackName

Parameters:
  ProjectName:
    Description: Project Name
    Type: String
    Default: unnamed
  Environment:
    Description: Environment
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
      - stg
  AppName1:
    Type: String
    Default: "webapp"
  AppName2:
    Type: String
    Default: "logrouter"
  PipelineName:
    Type: String
    Default: "webservice"
  S3BucketName1:
    Description: Bucket Unique Name
    Type: String
    Default: "artifact"
  AppECRName:
    Description: Application ECR
    Type: String
    Default: "hoge-repository"
  FireLensECRName:
    Description: Application ECR
    Type: String
    Default: "fuga-repository"
  CodeCommitRepositoryName:
    Description: Sorce code repository name
    Type: String
    Default: "hoge"
  CodeSeriesStackName:
    Description: "Stack name of the executed CodeSeries.yml template"
    Type: String
    Default: "hoge-stack"

Resources:
  # --------------------------------------------
  # CodeBuild
  # --------------------------------------------
  # BuildProject WebApp
  CodeBuildProject1:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-${AppName1}-build
      Source:
        BuildSpec: "webapp/buildspec.yml"
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: !Sub ${ProjectName}-${Environment}-${AppName1}-build
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildAppRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
  # BuildProject WebApp
  CodeBuildProject2:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-${AppName2}-build
      Source:
        BuildSpec: "firelens/buildspec.yml"
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: !Sub ${ProjectName}-${Environment}-${AppName2}-build
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildFireLensRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
  # --------------------------------------------
  # S3
  # --------------------------------------------
  # Artifacts Bucket
  Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${ProjectName}-${Environment}-${PipelineName}-${S3BucketName1}
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Enabled"
      LifecycleConfiguration:
        Rules:
          - Id: "AbortIncompleteMultipartUpload"
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: "Enabled"
          - Id: "NoncurrentVersionExpirationInDays"
            NoncurrentVersionExpirationInDays: 30
            Status: "Enabled"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-${PipelineName}-${S3BucketName1}

  # --------------------------------------------
  # CodeDeploy
  # --------------------------------------------
  #
  CodeDeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Sub "${ProjectName}-${Environment}-${PipelineName}-deploy"
      ComputePlatform: "ECS"
    # Deployment Group
    # 未対応

  # --------------------------------------------
  # EventBridge
  # --------------------------------------------
  EventsRule1:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-${PipelineName}-rule"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      State: "ENABLED"
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}-${PipelineName}-pipeline"
          Id: "codepipeline-sample2-test-pipeline"
          RoleArn: !GetAtt EventBridgeRole.Arn
      EventBusName: "default"

  # --------------------------------------------
  # CodePipeline
  # --------------------------------------------
  #
  CodePipeline1:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-${PipelineName}-pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Location: !Sub "${ProjectName}-${Environment}-${PipelineName}-${S3BucketName1}"
        Type: "S3"
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeCommit"
                Version: "1"
              Configuration:
                BranchName: "main"
                OutputArtifactFormat: "CODE_ZIP"
                PollForSourceChanges: "false"
                RepositoryName:
                  Fn::ImportValue: !Sub ${CodeSeriesStackName}-CodeCommit1
              OutputArtifacts:
                - Name: "SourceArtifact"
              Region: !Ref AWS::Region
              Namespace: "SourceVariables"
              RunOrder: 1
        - Name: "Build"
          Actions:
            - Name: !Sub ${ProjectName}-${Environment}-${AppName1}-build
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject1
                EnvironmentVariables: !Sub '[{"name":"ACCOUNT_ID","value":"${AWS::AccountId}","type":"PLAINTEXT"},{"name":"REPOSITORY_NAME","value":"${AppECRName}","type":"PLAINTEXT"}]'
              InputArtifacts:
                - Name: "SourceArtifact"
              OutputArtifacts:
                - Name: "BuildArtifact"
              Region: !Ref AWS::Region
              Namespace: "BuildVariables"
              RunOrder: 1
            - Name: !Sub ${ProjectName}-${Environment}-${AppName2}-build
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject2
                EnvironmentVariables: !Sub '[{"name":"ACCOUNT_ID","value":"${AWS::AccountId}","type":"PLAINTEXT"},{"name":"REPOSITORY_NAME","value":"${FireLensECRName}","type":"PLAINTEXT"}]'
              InputArtifacts:
                - Name: "SourceArtifact"
              OutputArtifacts:
                - Name: "BuildArtifactFireLens"
              Region: !Ref AWS::Region
              Namespace: "BuildVariables2"
              RunOrder: 1
        # DeploymentGroupが作成できないので事前に作成できなかった
  #        - Name: "Deploy"
  #          Actions:
  #            - Name: "Deploy"
  #              ActionTypeId:
  #                Category: "Deploy"
  #                Owner: "AWS"
  #                Provider: "CodeDeployToECS"
  #                Version: "1"
  #              Configuration:
  #                AppSpecTemplateArtifact: "SourceArtifact"
  #                ApplicationName: "sample2-BGDeploy"
  #                DeploymentGroupName: "DPGroup"
  #                Image1ArtifactName: "BuildArtifact"
  #                Image1ContainerName: "IMAGE1_NAME"
  #                Image2ArtifactName: "BuildArtifactFireLens"
  #                Image2ContainerName: "IMAGE2_NAME"
  #                TaskDefinitionTemplateArtifact: "SourceArtifact"
  #              InputArtifacts:
  #                - Name: "SourceArtifact"
  #                - Name: "BuildArtifact"
  #                - Name: "BuildArtifactFireLens"
  #              Region: !Ref AWS::Region
  #              RunOrder: 1

  # --------------------------------------------
  # IAM Role
  # --------------------------------------------
  # CodeBuild BuildProject WebApp Role
  CodeBuildAppRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub ${ProjectName}-${Environment}-${AppName1}-build-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
        - !Ref CodeBuildAppPolicy
  # CodeBuild BuildProject FireLens Role
  CodeBuildFireLensRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub ${ProjectName}-${Environment}-${AppName2}-build-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
        - !Ref CodeBuildFireLensPolicy
  # CodeDeploy Role
  CodeDeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub ${ProjectName}-${Environment}-${AppName2}-deploy-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"
  # CodePipeline Role
  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub ${ProjectName}-${Environment}-${PipelineName}-pipeline-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref CodePipelinePolicy
  # EventBridge Role
  EventBridgeRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub ${ProjectName}-${Environment}-${PipelineName}-eventbridge-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref EventBridgePolicy
  # --------------------------------------------
  # IAM Policy
  # --------------------------------------------
  # Codebuild BuildProject WebApp Policy
  CodeBuildAppPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub ${ProjectName}-${Environment}-${AppName1}-build-service-policy
      Path: "/service-role/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Resource:
              - !GetAtt Bucket1.Arn
              - !Sub ${Bucket1.Arn}/*
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Resource:
              - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*
  # Codebuild BuildProject Firelens Policy
  CodeBuildFireLensPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub ${ProjectName}-${Environment}-${AppName2}-build-service-policy
      Path: "/service-role/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Resource:
              - !Sub ${Bucket1.Arn}*
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Resource:
              - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*
  # CodePipeline Policy
  CodePipelinePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub ${ProjectName}-${Environment}-${PipelineName}-pipeline-service-policy
      Path: "/service-role/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
              - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment
            Resource: "*"
  # EventBridge Policy
  EventBridgePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub ${ProjectName}-${Environment}-${PipelineName}-eventbridge-service-policy
      Path: "/service-role/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - codepipeline:StartPipelineExecution
            Resource:
              - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline1}"
